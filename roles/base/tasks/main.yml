---
# Main tasks

- name: Setup RedHat
  include_tasks: redhat.yml
  when: "ansible_os_family|lower == 'redhat'"

- name: Setup Debian
  include_tasks: debian.yml
  when: "ansible_os_family|lower == 'debian'"

- name: Setup SUSE
  include_tasks: suse.yml
  when: "ansible_os_family|lower == 'suse'"

- name: Configure mount points
  mount:
    path: "{{item.path}}"
    src: "{{item.src}}"
    fstype: "{{item.fstype}}"
    opts: "{{item.opts | default(omit)}}"
    state: mounted
  loop: "{{mounts}}"

- name: Create sysadmin group
  group:
    name: sysadmin

- name: Create admin user
  user:
    name: admin
    group: users
    groups: [sysadmin]
    home: /home/admin
    comment: "System Admin"

- name: Create extra groups
  group:
    name: "{{item.name}}"
    gid: "{{item.gid}}"
  loop: "{{extra_groups}}"

- name: Create extra users
  user:
    name: "{{item.name}}"
    uid: "{{item.uid}}"
    group: "{{item.group}}"
    home: "{{item.home}}"
  loop: "{{extra_users}}"

- name: Check if NetworkManager config directory exists
  stat:
    path: /etc/NetworkManager/conf.d
  register: nm_config_dir

- name: Configure NetworkManager DNS resolver
  copy:
    dest: /etc/NetworkManager/conf.d/dns.conf
    content: |
      [main]
      dns=default
  register: nm_dns_config
  when: "nm_config_dir.stat.exists == true"

- name: Configure resolv.conf (search)
  lineinfile:
    path: /etc/resolv.conf
    regexp: "^search"
    line: "search {{dns_search}}"
  when: "dns_search | length > 0"

- name: Configure SSH server
  copy:
    dest: /etc/ssh/sshd_config.d/00-custom.conf
    content: |
      Banner /etc/ssh/banner.txt
      PermitRootLogin without-password

- name: Configure SSH authorized keys
  authorized_key:
    key: "{{item}}"
    user: root
  loop: "{{root_authorized_keys}}"

- name: Configure sysctl (fs.inotify.max_user_instances)
  sysctl:
    name: fs.inotify.max_user_instances
    value: "{{sysctl_fs_inotify_max_user_instances}}"
  when: "skip_sysctl == false"

- name: Configure sysctl (vm.max_map_count)
  sysctl:
    name: vm.max_map_count
    value: "{{sysctl_vm_max_map_count}}"
  when: "skip_sysctl == false"

- name: Configure sysctl (vm.swappiness)
  sysctl:
    name: vm.swappiness
    value: "{{sysctl_vm_swappiness}}"
  when: "skip_sysctl == false"

- name: Configure autofs master
  lineinfile:
    path: /etc/auto.master
    regexp: "^#\\+dir:/etc/auto\\.master\\.d"
    line: "+dir:/etc/auto.master.d"
  register: autofs_config
  when: "autofs_enabled == true"

- name: Enable autofs smb
  copy:
    dest: /etc/auto.master.d/smb.autofs
    content: /mnt/smb /etc/auto.smb --timeout=900
  when: "autofs_smb_enabled == true"

- name: Disable autofs smb
  file:
    path: /etc/auto.master.d/smb.autofs
    state: absent
  when: "autofs_smb_enabled == false"

- name: Configure autofs smb credentials
  copy:
    dest: /etc/creds/{{item.key}}
    content: |
      username={{item.value.username}}
      password={{item.value.password}}
      domain={{item.value.domain | default('')}}
  no_log: true
  loop: "{{autofs_smb_credentials | dict2items}}"
  when: "autofs_smb_enabled == true"

- name: Start autofs service
  service:
    name: autofs
    enabled: true
    state: restarted
  when: "autofs_enabled == true and autofs_config.changed and skip_services == false"

- name: Stop autofs service
  service:
    name: autofs
    enabled: false
    state: stopped
  when: "autofs_enabled == false and skip_services == false"

- name: Process template directories
  file:
    path: /{{item.path}}
    state: directory
  with_filetree: ../templates
  when: "item.state == 'directory'"

- name: Process template files
  template:
    src: "{{item.src}}"
    dest: "/{{item.path | splitext | first}}"
  with_filetree: ../templates
  when: "item.state == 'file'"
